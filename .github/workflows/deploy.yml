# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# Parameters:
# - `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`:
#   in setting>secrets of the Github project corresponding to a user with ECS and ECR permissions.
# - aws-region: eu-west-1
# - ECR_REPOSITORY: ctt-server
# - task-definition: aws/task-definition.json
# - container-name: ctt-container
# - service: ctt-svc
# - cluster: ctt-cluster
#
# Parameters for the task definition
# - family: ctt-task
# - containerDefinitions/name: ctt-container == SAME AS container-name in this file
# - containerDefinitions/logConfiguration/options/awslogs-group: "/ecs/ctt-task",
# - tags: application=ctt
#

on:
  release:
    types: [created]

name: Deploy on AWS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.1.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ctt-server
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/task-definition.json
          container-name: ctt-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ctt-svc
          cluster: ctt-cluster
          wait-for-service-stability: true
